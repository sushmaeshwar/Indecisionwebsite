first of all install webpack 
npm install webpack(sometimes go for specific versions)

meanwhile we also need to setup module.export in webpack.config.js by creating out that file

npm install react@16.0.0 react-dom@16.0.0

npm install babel-core@6.25.0 babel-loader@7.1.1


we are suppose to write module object in webpack.config.js

after this installation make sure to create a file called .babelrc
and include the json presets there
it is going to read the command line arguments


i'm also going to write about devtools in webpack.config.js

next i'm going to install => npm install webpack-dev-server@2.5.1
so that it executes fast and changes are reflected even faster. live-server also does the same. bUT 
Instead of that we are using this.

npm run dev-server

bundle.js is served from dev server object in webpack.config.js.
so even if we delete it. it works as usual

npm run build


now we don't to bind manually and we don't want to use constructor anymore
so we will visiting babeljs.io page and instaling some plugins from there
go to
docs
then plugins
stage2 presets
transform-class-properties
we are going to install everything individually

now type npm install babel-plugin-transform-class-properties@6.24.1


then go to .babelrc file, then type plugins and transform-class-properties

then type npm run dev-server


--------------------------------------------------------------------------------------------------
EXAMPLE OF USING TRANSFORM-CLASS-properties
---------------------------------------------------------------------------------------------------
class Oldsyntax{
    constructor(){
        this.name='Mike';
        this.getgreeting=this.getgreeting.bind(this);
    }
    getgreeting(){
        return `hi this is ${this.name}`;
    }
}
const oldsyntax = new Oldsyntax();
const getgreeting=oldsyntax.getgreeting;
console.log(getgreeting());

//----------------------------------------------------------------------------------------------------


class Newsyntax{
    name='jan';
    getgreeting=()=>{
        return `hi my name is $(this.name).`;
    }
}
const newsyntax = new Newsyntax();
const newgetgreeting = newsyntax.getgreeting();
console.log(newgetgreeting);
console.log(newsyntax);


------------------------------------------------------------------------------------------------
EXAMPLE DONE
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
passing children to component
------------------------------------------------------------------------
const Layout = (props) =>{
    return(
        <div>
            <p>Header</p>
            {props.children}// calling children props in inline
            <p>Footer</p>
        </div>
    );
}
ReactDOM.render((
    <Layout>
        <div>
        <h1>Page title</h1> //inline method
        <p>this is my page</p>
    </div>
    </Layout>
    ), document.getElementById('app'));

-------------------------------------------------------------------------------------------------

next we search for react-modal
and install it to our project

npm install react-modal@2.2.2

npm run dev-server

now we are going to use scss preprocessor

for that we need to configure webpack.config.js file

then go to npmjs.com/package/css-loader to further explore tools to include on webpack configuration file

also search for npmjs.com/package/style-loader

npm install style-loader@0.18.2 css-loader@0.28.4

then configure on webpack.config.js

then search for sass-lang.com/guide

now lets going to install

npm install sass-loader@6.0.6 node-sass@4.5.3

where node-sass is going to translate your sass code to css

then add sass-loader on weback.config.js


getbem.com will let you know more about naming conventions in scss

we are going to set up reset so that every browser is starting from the same place. like safari,windows,etc.

and we also install normalize.css so that it makes browsers render all elements more consitently and in line with modern standards. It precisely
targets only the styles that need normalizing

now npm install normalize.css
the only thing we need to do to use reset code is to import it

search for (sass reference functions) will provide all the details



